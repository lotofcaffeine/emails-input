{"version":3,"file":"emails-input.js","sources":["../src/StateManager/Store.ts","../src/StateManager/types.ts","../src/utils.ts","../src/model/Block.ts","../src/StateManager/Reducer.ts","../src/StateManager/actionCreators.ts","../node_modules/style-inject/dist/style-inject.es.js","../src/index.ts","../src/components/EmailsEditor/index.ts","../src/components/InputField/index.ts","../src/components/HiddenInput/index.ts","../src/components/EmailBlock/index.ts","../src/components/DeleteButton/index.ts"],"sourcesContent":["import { Store, State, Listener, ActionType, StoreProps } from './types';\n\nexport const createStore = ({ reducer, initialState }: StoreProps): Store => {\n  let state = initialState;\n  const subscribers: Map<ActionType, Listener[]> = new Map();\n  return {\n    dispatch: action => {\n      const newState = reducer(state, action);\n      if (subscribers.has(action.type)) {\n        subscribers.get(action.type)?.forEach(s => s(newState));\n      }\n    },\n    subscribe: (actionType, listener) => {\n      if (subscribers.has(actionType)) {\n        subscribers.get(actionType)?.push(listener);\n      } else {\n        subscribers.set(actionType, [listener]);\n      }\n    },\n    getState: (): State => {\n      return state;\n    },\n  };\n};\n","import { Block } from '../model/Block';\n\nexport enum ActionType {\n  DeleteBlock,\n  AppendBlock,\n  ChangeInput,\n}\n\nexport interface Action {\n  type: ActionType;\n  payload?: any;\n}\n\nexport type Listener = (state: State) => void;\n\nexport type Reducer = (state: State, action: Action) => State;\n\nexport interface StoreProps {\n  reducer: Reducer;\n  initialState: State;\n}\n\nexport interface Store {\n  dispatch: (action: Action) => void;\n  subscribe: (actionType: ActionType, listener: Listener) => void;\n  getState: () => State;\n}\n\nexport interface State {\n  blocks: Block[];\n  currentText: string;\n  lastBlockIdRemoved?: string;\n}\n","export const uuidv4 = (): string => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const validate = (text: string): boolean => {\n  if (!text || text.length === 0) return false;\n  return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(\n    text\n  );\n};\n","import { uuidv4 } from '../utils';\n\nexport class Block {\n  id: string;\n  text: string;\n  isValid: boolean;\n  constructor(text: string, isValid: boolean) {\n    this.id = uuidv4();\n    this.text = text;\n    this.isValid = isValid;\n  }\n}\n","import { Reducer, ActionType } from './types';\nimport { Block } from '../model';\nimport { validate } from '../utils';\n\nexport const reducer: Reducer = (state, action) => {\n  switch (action.type) {\n    case ActionType.DeleteBlock: {\n      state.blocks = state.blocks.filter(e => e !== action.payload.block);\n      state.lastBlockIdRemoved = action.payload.block.id;\n      return state;\n    }\n    case ActionType.AppendBlock: {\n      const text = action.payload.text;\n      if (text.indexOf(',') >= 0) {\n        const texts = text.split(',') as string[];\n        const blocks = texts\n          .map(t => t.trim())\n          .filter(t => t.length > 0)\n          .map(t => new Block(t, validate(t)));\n        state.blocks = state.blocks.concat(blocks);\n      } else {\n        const block = new Block(text, validate(text));\n        state.blocks.push(block);\n      }\n      return state;\n    }\n    case ActionType.ChangeInput: {\n      state.currentText = action.payload.text;\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n","import { Block } from '../model';\nimport { Action, ActionType } from './types';\n\nexport const appendBlock = (text: string): Action => {\n  return {\n    type: ActionType.AppendBlock,\n    payload: { text },\n  };\n};\n\nexport const deleteBlock = (block: Block): Action => {\n  return {\n    type: ActionType.DeleteBlock,\n    payload: { block },\n  };\n};\n\nexport const changeInput = (text: string): Action => {\n  return {\n    type: ActionType.ChangeInput,\n    payload: { text },\n  };\n};\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { emailsEditorBuilder } from './components';\nimport { createStore, reducer } from './StateManager';\nimport { EmailsEditor, EmailsInputOptions } from './types';\n\nexport default (\n  rootContainer: HTMLDivElement,\n  options: EmailsInputOptions\n): EmailsEditor => {\n  //// STATE MANAGER ////\n  const store = createStore({\n    reducer,\n    initialState: {\n      currentText: '',\n      blocks: [],\n    },\n  });\n\n  const emailsEditor = emailsEditorBuilder({\n    store,\n    ...options,\n  });\n  rootContainer.appendChild(emailsEditor);\n  return emailsEditor;\n};\n","import {\n  ActionType,\n  appendBlock,\n  changeInput,\n  deleteBlock,\n  Store,\n} from '../../StateManager';\nimport {\n  EmailsEditor,\n  EmailBlock,\n  InputField,\n  EmailsEditorProps,\n} from '../../types';\nimport { emailBlockBuilder } from '../EmailBlock';\nimport { inputFieldBuilder } from '../InputField';\nimport { hiddenInputBuilder } from '../HiddenInput';\n\nimport style from './EmailsEditor.modules.css';\nimport { Block } from '../../model';\n\nexport const emailsEditorBuilder = ({\n  id,\n  placeholder,\n  name = 'emails-input',\n  store,\n}: EmailsEditorProps): EmailsEditor => {\n  //// UI ELEMENTS ////\n  const createEmailBlock = (block: Block): EmailBlock => {\n    return emailBlockBuilder({\n      block,\n      onDelete: block => {\n        store.dispatch({\n          type: ActionType.DeleteBlock,\n          payload: { block },\n        });\n      },\n    });\n  };\n  const createInputField = (store: Store): InputField => {\n    return inputFieldBuilder({\n      id,\n      placeholder,\n      //avoid submiting the form when Enter is pressed\n      shouldPreventEnterDefault: true,\n      onTextChange: (text, key) => {\n        const { currentText, blocks } = store.getState();\n        // Update the state with the current value of the input field\n        store.dispatch(changeInput(text));\n\n        // If the key pressed is a Backspace/Delete or an Enter/Return\n        // Erase or Add Email Block, respectivelly.\n        if (key === 'Backspace') {\n          if (currentText.length === 0 && blocks.length > 0) {\n            const block = blocks[blocks.length - 1];\n            store.dispatch(deleteBlock(block));\n          }\n        } else if (key === 'Enter') {\n          const sanitizedText = text.trim();\n          if (sanitizedText.length > 0) {\n            store.dispatch(appendBlock(sanitizedText));\n          }\n        } else if (key === ',') {\n          const sanitizedText = text.trim();\n          store.dispatch(appendBlock(sanitizedText));\n        }\n      },\n      onTextPasted: (text, event) => {\n        const sanitizedText = text.trim();\n        store.dispatch(appendBlock(sanitizedText));\n        event.preventDefault();\n      },\n    });\n  };\n\n  const emailsEditor = document.createElement('div') as EmailsEditor;\n  emailsEditor.classList.add(style['emails-editor']);\n\n  emailsEditor.addEventListener(\n    'blur',\n    () => {\n      const text = store.getState().currentText;\n      if (text.length) {\n        store.dispatch(appendBlock(text));\n      }\n    },\n    true\n  );\n  emailsEditor.addEventListener('click', () => {\n    inputField.focus();\n  });\n  const inputField = createInputField(store);\n  emailsEditor.appendChild(inputField);\n\n  //Use a hidden input to send the valid emails via form submit\n  const hiddenInput = hiddenInputBuilder({\n    name,\n  });\n  emailsEditor.appendChild(hiddenInput);\n  //// ACTIONS SUBSCRIPTIONS ////\n\n  // New emails were added at the end of the email list\n  // The subscribe callback iterates the new emails and add an\n  // Email Block for each one\n  store.subscribe(ActionType.AppendBlock, ({ blocks }) => {\n    // The number of email blocks currently rendered is equal to the number\n    // of children of the element minu 2, because the <input> fields are also\n    // children.\n    for (let i = emailsEditor.childElementCount - 2; i < blocks.length; i++) {\n      emailsEditor.insertBefore(createEmailBlock(blocks[i]), inputField);\n    }\n    emailsEditor.scrollTop = emailsEditor.scrollHeight;\n    hiddenInput.setBlocks(blocks);\n    store.dispatch(changeInput(''));\n  });\n\n  // An email was deleted, this subscribre callback deletes the Email\n  // Block related with the deleted email.\n  store.subscribe(ActionType.DeleteBlock, ({ lastBlockIdRemoved, blocks }) => {\n    const emailBlock = emailsEditor.querySelector<EmailBlock>(\n      `[data-tag-id=\"${lastBlockIdRemoved}\"]`\n    );\n    if (emailBlock) {\n      emailsEditor.removeChild(emailBlock);\n      emailBlock.clean();\n      hiddenInput.setBlocks(blocks);\n    }\n    inputField.focus();\n  });\n\n  // The the current text in the state changes, this subscribe callback set\n  // the value of the input field accordingly\n  store.subscribe(ActionType.ChangeInput, ({ currentText }) => {\n    inputField.value = currentText;\n  });\n\n  // Set the behavior of the public interface in the created HTMLDivElement\n  emailsEditor.getBlocks = () => {\n    return store.getState().blocks;\n  };\n  emailsEditor.getEmails = () => {\n    return store.getState().blocks.filter(e => e.isValid);\n  };\n  emailsEditor.addBlock = (text: string): void => {\n    const sanitizedText = text.trim();\n    if (sanitizedText.length > 0) {\n      store.dispatch(appendBlock(sanitizedText));\n    }\n  };\n  return emailsEditor;\n};\n","import { InputField, InputFieldProps } from '../../types';\nimport style from './InputField.modules.css';\n\nexport const inputFieldBuilder = ({\n  id,\n  placeholder = 'add more people...',\n  shouldPreventEnterDefault = false,\n  onTextChange = () => {},\n  onTextPasted = () => {},\n}: InputFieldProps): InputField => {\n  const element = document.createElement('input') as InputField;\n  element.classList.add(style['emails-editor__input-field']);\n  if (id) {\n    element.setAttribute('id', id);\n  }\n  element.setAttribute('placeholder', placeholder);\n  if (shouldPreventEnterDefault) {\n    element.addEventListener('keydown', event => {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n      }\n    });\n  }\n  element.addEventListener('keyup', event => {\n    const value = (event.target as HTMLInputElement).value;\n    onTextChange(value, event.key, event);\n  });\n  element.addEventListener('paste', event => {\n    const text = (event.clipboardData || window.clipboardData).getData('text');\n    onTextPasted(text, event);\n  });\n  return element;\n};\n","import { HiddenInput, HiddenInputProps } from '../../types';\n\nexport const hiddenInputBuilder = ({\n  name = 'emails-input',\n  initialValue = [],\n}: HiddenInputProps): HiddenInput => {\n  const element = document.createElement('input') as HiddenInput;\n  element.setBlocks = blocks => {\n    element.setAttribute(\n      'value',\n      blocks\n        .filter(b => b.isValid)\n        .map(b => b.text)\n        .join(',')\n    );\n  };\n  element.setAttribute('name', name);\n  element.setAttribute('type', 'hidden');\n  element.setBlocks(initialValue);\n  return element;\n};\n","import { EmailBlock, EmailBlockProps } from '../../types';\nimport { deleteButtonBuilder } from '../DeleteButton';\nimport style from './EmailBlock.modules.css';\n\nexport const emailBlockBuilder = ({\n  block,\n  onDelete = () => {},\n}: EmailBlockProps): EmailBlock => {\n  const element = document.createElement('span') as EmailBlock;\n  element.classList.add(style['emails-editor__email-block']);\n  element.classList.add(\n    block.isValid\n      ? style['emails-editor__email-block--valid']\n      : style['emails-editor__email-block--invalid']\n  );\n  element.dataset['tagId'] = block.id;\n\n  const blockText = document.createElement('span');\n  blockText.textContent = block.text;\n  // This dataset field will be checked during e2e tests\n  blockText.dataset['isValid'] = block.isValid ? 'valid' : 'invalid';\n\n  element.appendChild(blockText);\n\n  const deleteButton = deleteButtonBuilder({\n    tagId: block.id,\n    onClick: () => {\n      onDelete(block);\n    },\n  });\n  element.appendChild(deleteButton);\n  element.clean = () => {\n    deleteButton.clean();\n  };\n  return element;\n};\n","import { DeleteButton, DeleteButtonProps } from '../../types';\nimport style from './DeleteButton.modules.css';\n\nconst createClose = () => {\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svg.setAttribute('width', '8');\n  svg.setAttribute('height', '8');\n  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  svg.setAttribute('viewBox', '0 0 8 8');\n  path.setAttribute('fill-rule', 'evenodd');\n  path.setAttribute('clip-rule', 'evenodd');\n  path.setAttribute(\n    'd',\n    'M8 .8L7.2 0 4 3.2.8 0 0 .8 3.2 4 0 7.2l.8.8L4 4.8 7.2 8l.8-.8L4.8 4 8 .8z'\n  );\n  path.setAttribute('fill', '#050038');\n  svg.appendChild(path);\n  return svg;\n};\n\nexport const deleteButtonBuilder = ({\n  tagId,\n  onClick = () => {},\n}: DeleteButtonProps): DeleteButton => {\n  let info = createClose();\n  const element = document.createElement('button') as DeleteButton;\n  element.dataset['tagId'] = tagId;\n  element.appendChild(info);\n  element.classList.add(style['emails-editor__delete-button']);\n  element.addEventListener('click', onClick, { once: true });\n  element.clean = () => {\n    element.removeEventListener('click', onClick);\n  };\n  return element;\n};\n"],"names":["ActionType","validate","text","length","test","Block","isValid","id","replace","c","r","Math","random","toString","reducer","state","action","type","DeleteBlock","blocks","filter","e","payload","block","lastBlockIdRemoved","AppendBlock","indexOf","split","map","t","trim","concat","push","ChangeInput","currentText","appendBlock","changeInput","styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","rootContainer","options","emailsEditor","placeholder","name","store","classList","add","addEventListener","getState","dispatch","inputField","focus","shouldPreventEnterDefault","onTextChange","onTextPasted","element","setAttribute","event","key","preventDefault","target","value","clipboardData","window","getData","inputFieldBuilder","sanitizedText","createInputField","hiddenInput","initialValue","setBlocks","b","join","hiddenInputBuilder","subscribe","i","childElementCount","onDelete","dataset","blockText","textContent","deleteButton","tagId","onClick","info","svg","createElementNS","path","createClose","once","clean","removeEventListener","deleteButtonBuilder","emailBlockBuilder","scrollTop","scrollHeight","emailBlock","querySelector","removeChild","getBlocks","getEmails","addBlock","emailsEditorBuilder","initialState","subscribers","Map","newState","has","get","forEach","s","actionType","listener","set","createStore"],"mappings":"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"}